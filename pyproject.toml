[build-system]  # https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]  # https://python-poetry.org/docs/pyproject/
name = "vkusvill-green-labels"
version = "0.0.0"
description = "A Python package that ..."
authors = ["Aidar Garikhanov <a1d4r@yandex.ru>"]
readme = "README.md"
repository = "https://github.com/a1d4r/vkusvill-green-labels-notifier"

[tool.commitizen]  # https://commitizen-tools.github.io/commitizen/config/
bump_message = "bump(release): v$current_version â†’ v$new_version"
tag_format = "v$version"
update_changelog_on_bump = true
version = "0.0.0"
version_files = ["pyproject.toml:version"]

[tool.poetry.dependencies]  # https://python-poetry.org/docs/dependency-specification/
pydantic = ">=1.10.7"
python = ">=3.11,<4.0"
requests = "^2.31.0"
loguru = "^0.7.2"
pydantic-settings = "^2.0.3"
pytelegrambotapi = "^4.14.0"
apscheduler = "^3.10.4"

[tool.poetry.group.test.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
black = ">=23.3.0"
commitizen = ">=3.2.1"
coverage = { extras = ["toml"], version = ">=7.2.5" }
mypy = ">=1.2.0"
poethepoet = ">=0.20.0"
pre-commit = ">=3.3.1"
pytest = ">=7.3.1"
pytest-clarity = ">=1.0.1"
pytest-mock = ">=3.10.0"
pytest-xdist = ">=3.2.1"
ruff = ">=0.0.270"
safety = ">=2.3.4,!=2.3.5"
shellcheck-py = ">=0.9.0"
typeguard = ">=3.0.2"
requests-mock = "^1.11.0"

[tool.poetry.group.dev.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
cruft = ">=2.14.0"
pdoc = ">=13.1.1"
types-requests = "^2.31.0.2"
pytest-dotenv = "^0.5.2"

[tool.black]  # https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
line-length = 100
target-version = ["py311"]

[tool.coverage.report]  # https://coverage.readthedocs.io/en/latest/config.html#report
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

[tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/config.html#xml
output = "reports/coverage.xml"

[tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html
junit_xml = "reports/mypy.xml"
plugins = "pydantic.mypy"
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
warn_return_any = false
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pydantic-mypy]  # https://pydantic-docs.helpmanual.io/mypy_plugin/#configuring-the-plugin
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]  # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --typeguard-packages=vkusvill_green_labels --verbosity=2 --junitxml=reports/pytest.xml"
filterwarnings = ["error", "ignore::DeprecationWarning"]
testpaths = ["src", "tests"]
xfail_strict = true


[tool.ruff]  # https://github.com/charliermarsh/ruff
fix = true
ignore-init-module-imports = true
line-length = 100
select = ["ALL"]
ignore = [
  "TD", # flake8-todos
  "FIX", # flake8-fixme
  "ANN",  # flake8-annotations (handled by mypy)
  "E501", # pycodestyle - line too long (handled by black)
  "D100", # pydocstyle - Missing docstring in public module
  "D101", # pydocstyle - Missing docstring in public class
  "D102", # pydocstyle - Missing docstring in public method
  "D103", # pydocstyle - Missing docstring in public function
  "D104", # pydocstyle - Missing docstring in public package
  "D105", # pydocstyle - Missing docstring in magic method
  "D106", # pydocstyle - Missing docstring in public nested class
  "D107", # pydocstyle - Missing docstring in __init__
  "PLR2004", # pylint - Magic value used in comparison (used for status codes)
]
unfixable = []
src = ["src", "tests"]
target-version = "py311"

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101", # Use of assert detected (assert allowed in tests)
]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.pycodestyle]
max-doc-length = 100

[tool.ruff.pydocstyle]
convention = "google"

[tool.poe.tasks]  # https://github.com/nat-n/poethepoet

  [tool.poe.tasks.docs]
  help = "Generate this package's docs"
  cmd = """
    pdoc
      --docformat $docformat
      --output-directory $outputdirectory
      vkusvill_green_labels
    """

    [[tool.poe.tasks.docs.args]]
    help = "The docstring style (default: google)"
    name = "docformat"
    options = ["--docformat"]
    default = "google"

    [[tool.poe.tasks.docs.args]]
    help = "The output directory (default: docs)"
    name = "outputdirectory"
    options = ["--output-directory"]
    default = "docs"

  [tool.poe.tasks.lint]
  help = "Lint this package"

    [[tool.poe.tasks.lint.sequence]]
    cmd = """
      pre-commit run
        --all-files
        --color always
      """

    [[tool.poe.tasks.lint.sequence]]
    shell = "safety check --continue-on-error --full-report"

  [tool.poe.tasks.test]
  help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage xml"
