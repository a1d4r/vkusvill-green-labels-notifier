from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from dishka import FromDishka

from vkusvill_green_labels.keyboards.menu import back_to_menu_kb
from vkusvill_green_labels.keyboards.notifications import (
    ToggleNotificationCD,
    ToggleNotificationTypeCD,
    toggle_notification_kb_builder,
    toggle_notification_type_kb_builder,
)
from vkusvill_green_labels.models.vkusvill import NotificationType
from vkusvill_green_labels.services.user_service import UserService

router = Router(name="notification_router")


@router.callback_query(F.data == "notifications")
async def notifications_handler(
    callback: CallbackQuery, state: FSMContext, user_service: FromDishka[UserService]
) -> None:
    if not isinstance(callback.message, Message):
        return
    await state.clear()
    is_enabled = await user_service.get_user_notifications_settings(callback.from_user)
    text = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã üü¢" if is_enabled else "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã üî¥"
    await callback.message.edit_text(
        text=text, reply_markup=toggle_notification_kb_builder(is_enabled)
    )
    await callback.answer()


@router.callback_query(ToggleNotificationCD.filter())
async def toggle_notifications_handler(
    callback: CallbackQuery,
    callback_data: ToggleNotificationCD,
    user_service: FromDishka[UserService],
) -> None:
    if not isinstance(callback.message, Message):
        return
    await user_service.update_user_notifications_settings(callback.from_user, callback_data.enabled)
    if callback_data.enabled:
        text = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã üü¢. \n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."
    else:
        text = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã üî¥. \n\n–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."
    await callback.message.edit_text(text=text, reply_markup=back_to_menu_kb)
    await callback.answer()


@router.callback_query(F.data == "notification_type")
async def notification_type_handler(
    callback: CallbackQuery, state: FSMContext, user_service: FromDishka[UserService]
) -> None:
    if not isinstance(callback.message, Message):
        return
    await state.clear()
    current_type = await user_service.get_user_notification_type(callback.from_user)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
    text += "üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ - —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω–∞–º–∏\n"
    text += "üî¢ –¢–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤\n"
    text += "üìà –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤"
    await callback.message.edit_text(
        text=text, reply_markup=toggle_notification_type_kb_builder(current_type)
    )
    await callback.answer()


@router.callback_query(ToggleNotificationTypeCD.filter())
async def toggle_notification_type_handler(
    callback: CallbackQuery,
    callback_data: ToggleNotificationTypeCD,
    user_service: FromDishka[UserService],
) -> None:
    if not isinstance(callback.message, Message):
        return
    await user_service.update_user_notification_type(
        callback.from_user, callback_data.notification_type
    )
    text = "–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "
    if callback_data.notification_type == NotificationType.detailed:
        text += "üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ"
    elif callback_data.notification_type == NotificationType.only_quantity:
        text += "üî¢ –¢–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    else:
        text += "üìà –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
    await callback.message.edit_text(text=text, reply_markup=back_to_menu_kb)
    await callback.answer()
